import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/react-stripe-js";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../components/ui/card";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Label } from "../components/ui/label";
import { Separator } from "../components/ui/separator";
import { Badge } from "../components/ui/badge";
import { useAuth } from "../contexts/AuthContext";
import { CreditCard, Lock, ShoppingBag, MapPin } from "lucide-react";
import toast from "react-hot-toast";

// Initialize Stripe (you'll need to add your publishable key)\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || 'pk_test_...');\n\nconst CheckoutForm = ({ orderData, onPaymentSuccess }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { user, profile } = useAuth();\n  const navigate = useNavigate();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [shippingInfo, setShippingInfo] = useState({\n    street: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United States'\n  });\n\n  const handleShippingChange = (field, value) => {\n    setShippingInfo(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    if (!shippingInfo.street || !shippingInfo.city || !shippingInfo.state || !shippingInfo.zipCode) {\n      toast.error('Please fill in all shipping information');\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      // First create the order\n      const orderResponse = await fetch('/api/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: profile?.id || user?.uid,\n          items: orderData.items,\n          shippingAddress: shippingInfo\n        })\n      });\n\n      if (!orderResponse.ok) {\n        throw new Error('Failed to create order');\n      }\n\n      const order = await orderResponse.json();\n\n      // Create payment intent\n      const paymentIntentResponse = await fetch('/api/payments/create-payment-intent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          orderId: order._id,\n          amount: order.totalAmount\n        })\n      });\n\n      if (!paymentIntentResponse.ok) {\n        throw new Error('Failed to create payment intent');\n      }\n\n      const { clientSecret } = await paymentIntentResponse.json();\n\n      // Confirm payment with Stripe\n      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: profile?.name || user?.displayName || user?.email,\n            email: user?.email,\n          },\n        }\n      });\n\n      if (error) {\n        console.error('Payment failed:', error);\n        toast.error(error.message);\n      } else if (paymentIntent.status === 'succeeded') {\n        // Confirm payment on backend\n        await fetch('/api/payments/confirm', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            paymentIntentId: paymentIntent.id,\n            orderId: order._id\n          })\n        });\n\n        toast.success('Payment successful!');\n        onPaymentSuccess(order, paymentIntent);\n      }\n    } catch (error) {\n      console.error('Payment error:', error);\n      toast.error('Payment failed. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Shipping Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <MapPin className=\"w-5 h-5\" />\n            Shipping Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"street\">Street Address</Label>\n            <Input\n              id=\"street\"\n              value={shippingInfo.street}\n              onChange={(e) => handleShippingChange('street', e.target.value)}\n              placeholder=\"123 Main Street\"\n              required\n            />\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"city\">City</Label>\n              <Input\n                id=\"city\"\n                value={shippingInfo.city}\n                onChange={(e) => handleShippingChange('city', e.target.value)}\n                placeholder=\"New York\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"state\">State</Label>\n              <Input\n                id=\"state\"\n                value={shippingInfo.state}\n                onChange={(e) => handleShippingChange('state', e.target.value)}\n                placeholder=\"NY\"\n                required\n              />\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"zipCode\">ZIP Code</Label>\n              <Input\n                id=\"zipCode\"\n                value={shippingInfo.zipCode}\n                onChange={(e) => handleShippingChange('zipCode', e.target.value)}\n                placeholder=\"10001\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"country\">Country</Label>\n              <Input\n                id=\"country\"\n                value={shippingInfo.country}\n                onChange={(e) => handleShippingChange('country', e.target.value)}\n                required\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payment Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <CreditCard className=\"w-5 h-5\" />\n            Payment Information\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4\">\n            <Label>Card Details</Label>\n            <div className=\"mt-2 p-3 border rounded-lg\">\n              <CardElement\n                options={{\n                  style: {\n                    base: {\n                      fontSize: '16px',\n                      color: '#424770',\n                      '::placeholder': {\n                        color: '#aab7c4',\n                      },\n                    },\n                  },\n                }}\n              />\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Lock className=\"w-4 h-4\" />\n            Your payment information is secure and encrypted\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Submit Button */}\n      <Button\n        type=\"submit\"\n        disabled={!stripe || isProcessing}\n        className=\"w-full\"\n        size=\"lg\"\n      >\n        {isProcessing ? 'Processing...' : `Pay $${orderData.total?.toFixed(2) || '0.00'}`}\n      </Button>\n    </form>\n  );\n};\n\nconst CheckoutPage = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [orderData, setOrderData] = useState(null);\n\n  useEffect(() => {\n    // Get cart data from location state or localStorage\n    const cartData = location.state?.cartData || JSON.parse(localStorage.getItem('cartItems') || '[]');\n    \n    if (!cartData || cartData.length === 0) {\n      toast.error('No items to checkout');\n      navigate('/cart');\n      return;\n    }\n\n    // Calculate totals\n    const subtotal = cartData.reduce((sum, item) => {\n      const price = item.discountPercentage > 0 \n        ? item.price * (1 - item.discountPercentage / 100)\n        : item.price;\n      return sum + (price * item.quantity);\n    }, 0);\n\n    const tax = subtotal * 0.08; // 8% tax\n    const shipping = subtotal > 50 ? 0 : 9.99; // Free shipping over $50\n    const total = subtotal + tax + shipping;\n\n    setOrderData({\n      items: cartData.map(item => ({\n        medicineId: item._id,\n        quantity: item.quantity\n      })),\n      cartItems: cartData,\n      subtotal,\n      tax,\n      shipping,\n      total\n    });\n  }, [location.state, navigate]);\n\n  const handlePaymentSuccess = (order, paymentIntent) => {\n    // Clear cart\n    localStorage.removeItem('cartItems');\n    \n    // Navigate to invoice page\n    navigate('/invoice', {\n      state: {\n        order,\n        paymentIntent\n      }\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Please log in to continue</h2>\n          <Button onClick={() => navigate('/auth')}>Go to Login</Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!orderData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-lg\">Loading checkout...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Checkout</h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">Complete your purchase</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Left Column - Checkout Form */}\n          <div>\n            <Elements stripe={stripePromise}>\n              <CheckoutForm \n                orderData={orderData} \n                onPaymentSuccess={handlePaymentSuccess}\n              />\n            </Elements>\n          </div>\n\n          {/* Right Column - Order Summary */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingBag className=\"w-5 h-5\" />\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Cart Items */}\n                <div className=\"space-y-3\">\n                  {orderData.cartItems.map((item) => {\n                    const discountedPrice = item.discountPercentage > 0 \n                      ? item.price * (1 - item.discountPercentage / 100)\n                      : item.price;\n                    \n                    return (\n                      <div key={item._id} className=\"flex items-center justify-between py-2 border-b\">\n                        <div className=\"flex items-center space-x-3\">\n                          {item.image && (\n                            <img \n                              src={item.image} \n                              alt={item.name}\n                              className=\"w-12 h-12 object-cover rounded\"\n                            />\n                          )}\n                          <div>\n                            <p className=\"font-medium text-sm\">{item.name}</p>\n                            <p className=\"text-xs text-gray-500\">Qty: {item.quantity}</p>\n                            {item.discountPercentage > 0 && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {item.discountPercentage}% off\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">${(discountedPrice * item.quantity).toFixed(2)}</p>\n                          {item.discountPercentage > 0 && (\n                            <p className=\"text-xs text-gray-500 line-through\">\n                              ${(item.price * item.quantity).toFixed(2)}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                <Separator />\n\n                {/* Price Breakdown */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Subtotal</span>\n                    <span>${orderData.subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Tax</span>\n                    <span>${orderData.tax.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Shipping</span>\n                    <span>{orderData.shipping === 0 ? 'Free' : `$${orderData.shipping.toFixed(2)}`}</span>\n                  </div>\n                  <Separator />\n                  <div className=\"flex justify-between font-bold text-lg\">\n                    <span>Total</span>\n                    <span>${orderData.total.toFixed(2)}</span>\n                  </div>\n                </div>\n\n                {/* Free Shipping Notice */}\n                {orderData.subtotal < 50 && (\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                    <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                      Add ${(50 - orderData.subtotal).toFixed(2)} more for free shipping!\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutPage;
